(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[62871],{46071:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/en/about",function(){return t(970)}])},970:function(e,n,t){"use strict";t.r(n),t.d(n,{__N_SSG:function(){return l}});var s=t(26042),o=t(69396),r=t(85893),i=t(48863),a=t(11151);function c(e){var n=Object.assign({h1:"h1",p:"p",pre:"pre",code:"code",a:"a",hr:"hr"},(0,a.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{children:"About Node.js\xae"}),"\n",(0,r.jsx)(n.p,{children:'As an asynchronous event-driven JavaScript runtime, Node.js is designed to build\nscalable network applications. In the following "hello world" example, many\nconnections can be handled concurrently. Upon each connection, the callback is\nfired, but if there is no work to be done, Node.js will sleep.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const http = require('http');\n\nconst hostname = '127.0.0.1';\nconst port = 3000;\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello World');\n});\n\nserver.listen(port, hostname, () => {\n  console.log(`Server running at http://${hostname}:${port}/`);\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is in contrast to today's more common concurrency model, in which OS threads\nare employed. Thread-based networking is relatively inefficient and very\ndifficult to use. Furthermore, users of Node.js are free from worries of\ndead-locking the process, since there are no locks. Almost no function in\nNode.js directly performs I/O, so the process never blocks except when the I/O is performed using\nsynchronous methods of Node.js standard library. Because nothing blocks, scalable systems are very\nreasonable to develop in Node.js."}),"\n",(0,r.jsxs)(n.p,{children:["If some of this language is unfamiliar, there is a full article on\n",(0,r.jsx)(n.a,{href:"/en/docs/guides/blocking-vs-non-blocking/",children:"Blocking vs. Non-Blocking"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:["Node.js is similar in design to, and influenced by, systems like Ruby's\n",(0,r.jsx)(n.a,{href:"https://github.com/eventmachine/eventmachine",children:"Event Machine"})," and Python's ",(0,r.jsx)(n.a,{href:"https://twistedmatrix.com/trac/",children:"Twisted"}),". Node.js takes the event model a bit\nfurther. It presents an ",(0,r.jsx)(n.a,{href:"/en/docs/guides/event-loop-timers-and-nexttick/",children:"event loop"})," as a runtime construct instead of as a library. In other systems,\nthere is always a blocking call to start the event-loop.\nTypically, behavior is defined through callbacks at the beginning of a script, and\nat the end a server is started through a blocking call like ",(0,r.jsx)(n.code,{children:"EventMachine::run()"}),".\nIn Node.js, there is no such start-the-event-loop call. Node.js simply enters the event loop after executing the input script. Node.js\nexits the event loop when there are no more callbacks to perform. This behavior\nis like browser JavaScript â€” the event loop is hidden from the user."]}),"\n",(0,r.jsx)(n.p,{children:"HTTP is a first-class citizen in Node.js, designed with streaming and low\nlatency in mind. This makes Node.js well suited for the foundation of a web\nlibrary or framework."}),"\n",(0,r.jsxs)(n.p,{children:["Node.js being designed without threads doesn't mean you can't take\nadvantage of multiple cores in your environment. Child processes can be spawned\nby using our ",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options",children:(0,r.jsx)(n.code,{children:"child_process.fork()"})})," API, and are designed to be easy to\ncommunicate with. Built upon that same interface is the ",(0,r.jsx)(n.a,{href:"https://nodejs.org/api/cluster.html",children:(0,r.jsx)(n.code,{children:"cluster"})})," module,\nwhich allows you to share sockets between processes to enable load balancing\nover your cores."]})]})}t(25675);var l=!0;n.default=(0,i.j)({MDXContent:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Object.assign({},(0,a.ah)(),e.components).wrapper;return n?(0,r.jsx)(n,(0,o.Z)((0,s.Z)({},e),{children:(0,r.jsx)(c,(0,s.Z)({},e))})):c(e)},pageOpts:{filePath:"pages/en/about/index.md",route:"",frontMatter:{layout:"about.hbs",title:"About",trademark:"Trademark"},title:"About"},pageNextRoute:"/en/about"})}},function(e){e.O(0,[48863,49774,92888,40179],function(){return e(e.s=46071)}),_N_E=e.O()}]);